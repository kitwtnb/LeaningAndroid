apply plugin: 'com.android.application'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.oss.licenses.plugin'

kapt {
    correctErrorTypes = true
}

android {
    compileSdkVersion versions.compileSdkVersion
    dataBinding.enabled = true
    defaultConfig {
        applicationId "com.kitwtnb.droidkaigi2018contributors"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // ===================  Application  =======================
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation depends.firebase
    implementation depends.kotlin
    implementation depends.coroutine.core
    implementation depends.coroutine.android

    // ===================  Architecture Components  ===========
    implementation depends.architectureComponents.extensions

    // ===================  Support Library  ===================
    implementation depends.support.appcompat
    implementation depends.support.design
    implementation depends.support.constraint
    implementation depends.support.recyclerView
    implementation depends.support.cardView

    // ===================  DI Container  ======================
    implementation depends.koin.android
    implementation depends.koin.architectureComponents
    testImplementation depends.koin.test

    // ===================  Observer  ==========================
    implementation depends.rxjava2.core
    implementation depends.rxjava2.kotlin
    implementation depends.rxjava2.android

    // ===================  Network  ===========================
    implementation depends.kotshi.api
    kapt depends.kotshi.compiler
    implementation depends.okhttp.core
    implementation depends.okhttp.loggingInterceptor
    implementation depends.retrofit2.core
    implementation depends.retrofit2.adapterCoroutine
    implementation depends.retrofit2.converterMoshi

    // ===================  UI  ================================
    implementation depends.playServicesOssLicenses
    implementation depends.picasso
    implementation depends.circleImageView
    implementation depends.epoxy.core
    implementation depends.epoxy.databinding
    kapt depends.epoxy.processor

    // ===================  Debug  =============================
    implementation(depends.crashlytics) {
        transitive = true
    }
    implementation depends.timber
    debugImplementation depends.leakcanary.debug
    releaseImplementation depends.leakcanary.release

    // ===================  Test  ==============================
    testImplementation depends.junit
    androidTestImplementation depends.supporttest.runner
    androidTestImplementation depends.supporttest.espresso
    testImplementation depends.kotlinTest
}

// Leak Canary settings for unit tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
